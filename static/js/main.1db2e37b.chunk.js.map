{"version":3,"sources":["components/Plots/LineChart.js","components/Plots/CandleStickChart.js","actions/types.js","components/styles/financialItemStyle.js","components/FinancialItem.js","actions/financialItem.js","reducers/financialItemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","financialItem","financialItemName","color","data","x","financialChartXValues","y","financialChartCloseValues","type","mode","marker","layout","width","height","title","options","displaylogo","CandleStickChart","console","log","close","decreasing","line","high","financialChartHighValues","increasing","low","financialChartLowValues","open","financialChartOpenValues","dragmode","showlegend","xaxis","rangeslider","visible","yaxis","autorange","GET_FINANCIAL_ITEM","financialItemStyle","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","connect","state","getFinancialItem","symbol","dispatch","a","finItemSymbol","financialChartXValuesFunction","financialChartCloseValuesFunction","financialChartOpenValuesFunction","financialChartHighValuesFunction","financialChartLowValuesFunction","fetch","then","response","json","key","push","payload","classes","useState","typeOfChart","setTypeOfChart","firstUpdate","useRef","useLayoutEffect","current","className","displayTheRightPlot","FormControl","id","InputLabel","shrink","Select","labelId","value","onChange","e","target","displayEmpty","MenuItem","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1db2e37b.chunk.js","sourcesContent":["import React,{Fragment} from 'react';\nimport PropTypes from 'prop-types'\nimport Plot from 'react-plotly.js';\n\nconst LineChart = ({financialItem,financialItemName,color}) => {\n    return (\n        <Fragment>\n            <Plot \n                data={[\n                    {\n                        x: financialItem.financialChartXValues,\n                        y: financialItem.financialChartCloseValues,\n                        type: 'scatter',\n                        mode: 'lines+markers',\n                        marker: {color: color},\n                    }\n                ]}\n                layout={{width: 1020, height: 540, title: financialItemName}}\n                options ={ {displaylogo: 'false'} }\n            />\n        </Fragment>\n    );\n};\n\nLineChart.propTypes = {\n    financialItem: PropTypes.object.isRequired,\n    financialItemName: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n}\n\nexport default LineChart;","import React,{Fragment} from 'react';\nimport PropTypes from 'prop-types'\nimport Plot from 'react-plotly.js';\n\n\nconst CandleStickChart = ({financialItem,financialItemName}) => {\n    console.log(financialItem)\n    return (\n        <Fragment>\n            <Plot \n                data={[\n                    {\n                        x: financialItem.financialChartXValues,\n                        close: financialItem.financialChartCloseValues,\n                        decreasing: {line: {color: 'red'}},\n                        high: financialItem.financialChartHighValues,\n                        increasing: {line: {color: 'green'}},\n                        line: {color: 'rgba(31,119,180,1)'},\n                        low: financialItem.financialChartLowValues,\n                        open: financialItem.financialChartOpenValues,\n                        type: 'candlestick',\n                    }\n                ]}\n                layout={{\n                        width: 1020, \n                        height: 540,\n                        title: financialItemName,\n                        dragmode: 'zoom',\n                        showlegend: false,\n                        xaxis: {\n                            rangeslider: {\n                                visible: false\n                            }\n                        },\n                        yaxis: {\n                            autorange: true,\n                        }\n                }}\n                options ={ {displaylogo: 'false'} }\n            />\n        </Fragment>\n    );\n};\n\nCandleStickChart.propTypes = {\n    financialItem: PropTypes.object.isRequired,\n    financialItemName: PropTypes.string.isRequired,\n}\n\nexport default CandleStickChart;\n","export const GET_FINANCIAL_ITEM = 'GET_FINANCIAL_ITEM';","import {makeStyles} from \"@material-ui/core/styles\";\n\nexport const financialItemStyle = makeStyles(theme => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n        \n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n","import React, {useLayoutEffect, useRef, useState} from 'react';\n// Components imports\nimport LineChart from \"./Plots/LineChart\";\nimport CandleStickChart from \"./Plots/CandleStickChart\";\n// Redux imports\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types'\nimport {getFinancialItem} from \"../actions/financialItem\";\n// Material UI imports\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {financialItemStyle} from './styles/financialItemStyle'\n\n\n\nconst FinancialItem = ({financialItem:{financialItem},getFinancialItem}) => {\n\n    const classes = financialItemStyle();\n    \n    const [typeOfChart,setTypeOfChart] = useState('line');\n    const firstUpdate = useRef(true);\n\n    useLayoutEffect(() => {\n        if (firstUpdate.current) {\n            firstUpdate.current = false;\n            getFinancialItem('AAL');\n            \n            return;\n        }\n\n    },[]);\n\n\n    \n    const handleChartChange = e => {\n        setTypeOfChart(e.target.value);\n    };\n\n\n\n    const displayTheRightPlot = () => {\n        console.log(financialItem)\n        switch (typeOfChart) {\n            case 'line':\n                return (<LineChart\n                    color='yellow'\n                    financialItem={financialItem}\n                    financialItemName={financialItem.symbol}\n                />);\n\n            case 'candlestick':\n                return (<CandleStickChart\n                    financialItem={financialItem}\n                    financialItemName={financialItem.symbol}\n                />);\n\n            default:\n                return (<LineChart\n                    color='yellow'\n                    financialItem={financialItem}\n                    financialItemName={financialItem.symbol}\n                />);\n        }\n    };\n\n    return (\n        <div className='financial-item-big-wrapper'>\n            <div>\n                \n              {financialItem ? displayTheRightPlot() : null }\n            </div>\n            <div>\n                {\n                    financialItem ?\n                        <FormControl className={classes.formControl} id='stock-type-of-chart-form-control'>\n                            <InputLabel shrink id=\"type-of-chart-select-label\">\n                                Тип графика\n                            </InputLabel>\n                            <Select \n                                labelId=\"type-of-chart-select-label\"\n                                id=\"type-of-chart-select\"\n                                value={typeOfChart}\n                                onChange={handleChartChange}\n                                displayEmpty\n                                className={classes.selectEmpty}\n                            >\n                                <MenuItem value={'line'}><em>Линейный график</em></MenuItem>\n                                <MenuItem value={'candlestick'}><em>Свечи</em></MenuItem>\n                            </Select>\n                        </FormControl> : null\n                }\n            </div>\n            \n        </div>\n    );\n};\n\nFinancialItem.propTypes = {\n    financialItem: PropTypes.object.isRequired,\n    getFinancialItem: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    financialItem: state.financialItem\n})\n\nexport default connect(mapStateToProps,{getFinancialItem})(FinancialItem);","import {GET_FINANCIAL_ITEM} from \"./types\";\n\nexport const getFinancialItem = (symbol) => async dispatch => {\n    const API_KEY = 'JS348TFALNXS3L2K';\n    let finItemSymbol = symbol;\n\n    let financialChartXValuesFunction = [];\n    let financialChartCloseValuesFunction = [];\n    let financialChartOpenValuesFunction = [];\n    let financialChartHighValuesFunction = [];\n    let financialChartLowValuesFunction = [];\n\n    try{\n         await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${finItemSymbol}&outputsize=compact&apikey=${API_KEY}`)\n            .then(\n                function(response) {\n                    return response.json();\n                }\n            )\n            .then(\n                function(data) {\n                    console.log(data);\n\n                    for (let key in data['Time Series (Daily)']) {\n                        financialChartXValuesFunction.push(key);\n                        financialChartCloseValuesFunction.push(data['Time Series (Daily)'][key]['4. close']);\n                        financialChartOpenValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\n                        financialChartHighValuesFunction.push(data['Time Series (Daily)'][key]['2. high']);\n                        financialChartLowValuesFunction.push(data['Time Series (Daily)'][key]['3. low']);\n                    }\n\n                })\n\n        const financialItem = {\n            symbol: finItemSymbol,\n            financialChartXValues: financialChartXValuesFunction,\n            financialChartCloseValues: financialChartCloseValuesFunction,\n            financialChartOpenValues: financialChartOpenValuesFunction,\n            financialChartHighValues: financialChartHighValuesFunction,\n            financialChartLowValues: financialChartLowValuesFunction,\n        };\n\n        dispatch({\n            type: GET_FINANCIAL_ITEM,\n            payload: financialItem\n        })\n    }catch (e) {\n        console.log(e)\n    }\n}","import {GET_FINANCIAL_ITEM} from \"../actions/types\";\n\n\nconst initialState = {\n    financialItem: null\n};\n\nexport default function PlotReducer(state=initialState,action) {\n    const {type,payload}= action;\n\n    if (type === GET_FINANCIAL_ITEM) {\n        return{\n            ...state,\n            financialItem: payload\n        };\n    } else {\n        return state\n    }\n}","import {combineReducers} from \"redux\";\nimport financialItem from './financialItemReducer'\n\nexport default combineReducers({\n    financialItem\n    \n})","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import React from 'react';\nimport FinancialItem from \"./components/FinancialItem\";\n\nimport {Provider} from 'react-redux'\nimport store from \"./store\";\n\nfunction App(){\n  return (\n      <Provider store={store}>\n          <div className=\"App\">\n\n              <FinancialItem/>\n              \n          </div>\n\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}